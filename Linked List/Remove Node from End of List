/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    int getLength(ListNode* head)
    {
        ListNode* temp=head;
        int length=0;
        while(temp!=NULL)
        {
            temp=temp->next;
            length++;
        }
        return length;
    }
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        if(head==NULL||head->next==NULL)
        {
            return NULL;
        }
        ListNode* temp1=head;
        int len=getLength(temp1);
      //cout<<len<<endl;
        if(len==n)
        {
          ListNode*tempp=head;
            head=head->next;
            tempp->next=NULL;
            delete tempp;
        }
        else if(len==2&&n==1)
        {
            ListNode*tempp=head->next;
            head->next=NULL;
            delete tempp;
            
        }
        else
        {
        int i=1;
        ListNode* temp=head;
        while(i<(len-n))
        {
            i++;
            temp=temp->next;
        }
        /*
        if(temp->next->next!=NULL)
        {
        ListNode* store=temp->next->next;
        temp->next->next=NULL;
        temp->next=store;
        delete store/
        }
        else
        {
            ListNode* store=temp->next;
             temp->next->next=NULL;
            temp->next=NULL;
            delete store;
            
        }*/
        ListNode* forward=temp->next;
        temp->next=forward->next;
        forward->next=NULL;
        delete forward;
        }
        return head;
        
    }
};
