#include<unordered_map>
#include<algorithm>
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(head==NULL)
        {
            return NULL;
        }
        unordered_map<long,bool>visited;
        ListNode* temp1=head;
        while(temp1->next!=NULL)
        {
            if(temp1->val==temp1->next->val)
            {
                visited[temp1->val]=true;
                temp1=temp1->next;
            }
            else
            temp1=temp1->next;
        }
        
        ListNode* temp=head;
        while(temp->next!=NULL)
        {
         if(visited[temp->next->val]==true)
         {
          ListNode* remove=temp->next;
             temp->next=temp->next->next;
             remove->next=NULL;
             delete remove;
         }
            else
            {
                temp=temp->next;
            }
        }
        if(visited[head->val]==true)
        {
            if(head->next==NULL)
            {
                return NULL;
            }
            ListNode *tt=head;
            head=head->next;
            tt->next=NULL;
            delete tt;
        }
        return head;
    }
};
