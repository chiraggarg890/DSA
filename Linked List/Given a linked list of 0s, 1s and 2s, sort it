/**
Changing links
**/


/*

  Node is defined as
  struct Node {
    int data;
    struct Node *next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

*/
class Solution
{
    public:
    //Function to sort a linked list of 0s, 1s and 2s.
    Node* segregate(Node *head) {
        int countZero=0;
        int countOne=0;
        int countTwo=0;
        Node* temp=head;
        while(temp!=NULL)
        {
            if(temp->data==0)
            {
               countZero++; 
            }
            else if(temp->data==1)
            {
                countOne++; 
            }
            else
            {
                countTwo++; 
            }
            temp=temp->next;
        }
        temp=head;
       
            while(countZero){
            temp->data=0;
            countZero--;
            temp=temp->next;
            }
             while(countOne){
            temp->data=1;
            countOne--;
            temp=temp->next;
            }
             while(countTwo){
            temp->data=2;
            countTwo--;
            temp=temp->next;
            }
            
    return head;
        // Add code here
        
    }
};



/** Without Changing Links**/

 /* Node is defined as
  struct Node {
    int data;
    struct Node *next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

*/
class Solution
{
    public:
    void insertAtTail(Node*& tail, Node* temp)
    {
      tail->next=temp;
      tail=tail->next;
    }
    //Function to sort a linked list of 0s, 1s and 2s.
    Node* segregate(Node *head) {
        
        // Add code here
        Node* zerohead= new Node(-1);
        Node* zerotail=zerohead;
        Node* onehead= new Node(-1);
        Node* onetail=onehead;
        Node* twohead= new Node(-1);
        Node* twotail=twohead;
         
        Node* temp=head;
        while(temp!=NULL)
        {
            if(temp->data==0)
            {
                insertAtTail(zerotail,temp);
            }
                 else if(temp->data==1)
            {
                insertAtTail(onetail,temp);
            }
            else
            {
                insertAtTail(twotail,temp);
            }
            temp=temp->next;
        }
       if(onehead->next!=NULL)
       {
           zerotail->next=onehead->next;
       }
       else
       {
           zerotail->next=twohead->next;
       }
       onetail->next=twohead->next;
       twotail->next=NULL;
       head=zerohead->next;
       delete zerohead;
       delete onehead;
       delete twohead;
       return head;
        
        
    }
};

