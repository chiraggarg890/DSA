/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        if(head==NULL||head->next==NULL)
        {
            return head;
            
        }
        ListNode* prev=NULL;
        ListNode* curr=head;
        ListNode* forward=NULL;
        int cnt=1;
        int j=1;
        ListNode* temp=curr;
        while(temp!=NULL&&j<=k)
        {
            temp=temp->next;
            j++;
        }
        if(j>k)
        {
        while(cnt<=k&&curr!=NULL)
        {
            forward=curr->next;
            curr->next=prev;
            prev=curr;
            curr=forward;
            cnt++;
            
        }
        }
        else
        {
            forward=NULL;return curr;
        }
        if(forward!=NULL)
        {
            head->next=reverseKGroup(curr,k);
        }
        return prev;
            
    }
};
