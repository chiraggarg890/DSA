class Solution {
    private:
    /*void bfs(int row,int col, vector<vector<char>>& grid,vector<vector<int>> &visited)
    {
        queue<pair<int,int>>q;
        q.push({row,col});
        visited[row][col]=1;
        
        int m=grid.size();
        int n=grid[0].size();
        
        while(!q.empty())
        {
          int crow=q.front().first;
          int ccolumn=q.front().second;
          q.pop();
        
        for(int i=-1;i<=1;i++)
        {
            for(int j=-1;j<=1;j++)
            {
                int nrow=crow+i;
                int ncol=ccolumn+j;
                if(nrow>=0&& nrow<m && ncol>=0 && ncol<n &&grid[nrow][ncol]=='1' && !visited[nrow][ncol])
                {
                    q.push({nrow,ncol});
                    visited[nrow][ncol]=1;
                }
           }
           }
        }
    }*/
    
    void dfs(int row,int col, vector<vector<char>>& grid,vector<vector<int>> &visited,int &m, int &n)
    {
        visited[row][col]=1;
        for(int i=-1;i<=1;i++)
        {
            for(int j=-1;j<=1;j++)
            {
                int nrow=row+i;
                int ncol=col+j;
                if(nrow>=0 && nrow<m && ncol>=0 && ncol<n && grid[nrow][ncol]=='1' && !visited[nrow][ncol])
                {
                    dfs(nrow,ncol,grid,visited,m,n);
                }
            }
        }
    }
  public:
    // Function to find the number of islands.
    int numIslands(vector<vector<char>>& grid) {
        // Code here
        int m=grid.size();
        int n=grid[0].size();
        int cnt=0;
        vector<vector<int>>visited(m,vector<int>(n,0));
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(!visited[i][j]&& grid[i][j]=='1')
                {
                    cnt++;
                    dfs(i,j,grid,visited,m,n);
                }
            }
        }
        return cnt;
    }
};
