#include<unordered_map>
#include<queue>
#include<list>
vector<int> shortestPath( vector<pair<int,int>> edges , int n , int m, int s , int t){
	// Write your code here
    //ut<<1;
	unordered_map<int,list<int>>adj;
     for(int i=0;i<edges.size();i++)
     {
         int u=edges[i].first;
         int v=edges[i].second;
         
         adj[u].push_back(v);
         adj[v].push_back(u);                    
     }

unordered_map<int,bool>visited;
//ctor<int>parent;
unordered_map<int,int>parent;
queue<int>q;
q.push(s);
parent[s]=-1;
visited[s]=1;
while(!q.empty())
{
    int front=q.front();
    q.pop();
    for(auto neighbour:adj[front])
    {
        if(!visited[neighbour])
        {
            q.push(neighbour);
            parent[neighbour]=front;
            visited[neighbour]=1;
        }
    }
}
vector<int>ans;
ans.push_back(t);
int currentNode=t;
while(currentNode!=s)
{
    currentNode=parent[currentNode];
    ans.push_back(currentNode);
}
reverse(ans.begin(),ans.end());
return ans;
}
