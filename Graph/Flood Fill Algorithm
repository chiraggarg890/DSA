class Solution {
    private:
    void dfs(vector<vector<int>>& ans, vector<vector<int>>& image, int sr, int sc, int &newcolor,vector<vector<int>>& visited,
    int& m,int &n, int& orgcol,int *delrow,int *delcol)
    {
        visited[sr][sc]=1;
        ans[sr][sc]=newcolor;
        for(int i=0;i<4;i++)
        {
       /* int nrow=sr-1;
        int ncol=sc;
        if(nrow>=0 && nrow<m && ncol>=0 && ncol<n && image[nrow][ncol]==orgcol && !visited[nrow][ncol] )
        {
             dfs(ans,image,nrow,ncol,newcolor,visited,m,n,orgcol);
        }
        
         nrow=sr;
         ncol=sc-1;
        if(nrow>=0 && nrow<m && ncol>=0 && ncol<n && image[nrow][ncol]==orgcol && !visited[nrow][ncol] )
        {
             dfs(ans,image,nrow,ncol,newcolor,visited,m,n,orgcol);
        }
        
        
         nrow=sr;
         ncol=sc+1;
        if(nrow>=0 && nrow<m && ncol>=0 && ncol<n && image[nrow][ncol]==orgcol && !visited[nrow][ncol] )
        {
             dfs(ans,image,nrow,ncol,newcolor,visited,m,n,orgcol);
        }
        
         nrow=sr+1;
         ncol=sc;*/
         int nrow=delrow[i]+sr;
         int ncol=delcol[i]+sc;
        if(nrow>=0 && nrow<m && ncol>=0 && ncol<n && image[nrow][ncol]==orgcol && !visited[nrow][ncol] )
        {
             dfs(ans,image,nrow,ncol,newcolor,visited,m,n,orgcol,delrow,delcol);
        }}
        
    }
public:
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        // Code here 
        int m=image.size();
        int n=image[0].size();
        vector<vector<int>>ans;
        vector<vector<int>>visited(m,vector<int>(n,0));
        ans=image;
        int orgcol=image[sr][sc];
        int delrow[]={-1,0,1,0};
        int delcol[]={0,1,0,-1};
        dfs(ans,image,sr,sc,newColor,visited,m,n,orgcol,delrow,delcol);
        return ans;
    }
};
