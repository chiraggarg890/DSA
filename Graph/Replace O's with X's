class Solution{
public:
    void dfs(int row, int col, vector<vector<int>> &vis,vector<vector<char>> & mat, int delrow[], int delcol[] )
    {
        int n=mat.size();
        int m=mat[0].size();
        
        vis[row][col]=1;
        for(int i=0;i<4;i++)
        {
            int nrow=row+delrow[i];
            int ncol=col+delcol[i];
            
            if(nrow>=0 && nrow< n && ncol>=0 && ncol<m && mat[nrow][ncol]=='O' && !vis[nrow][ncol])
            {
                 dfs(nrow,ncol,vis,mat,delrow,delcol);
            }
        }
    }
    vector<vector<char>> fill(int n, int m, vector<vector<char>> mat)
    {
        // code here
        vector<vector<int>>vis(n,vector<int>(m,0));
        
        int delrow[4]={-1,0,1,0};
        int delcol[4]={0,1,0,-1};
        
        for(int i=0;i<m;i++)
        {
            // traversing columns
            if(vis[0][i]==0 && mat[0][i]=='O')
            {
                dfs(0,i,vis,mat,delrow,delcol);
            }
            
            if(vis[n-1][i]==0 && mat[n-1][i]=='O')
            {
                dfs(n-1,i,vis,mat,delrow,delcol);
            }
        }
        
         for(int i=0;i<n;i++)
        {
            // traversing rows
            if(vis[i][0]==0 && mat[i][0]=='O')
            {
                dfs(i,0,vis,mat,delrow,delcol);
            }
            
            if(vis[i][m-1]==0 && mat[i][m-1]=='O')
            {
                dfs(i,m-1,vis,mat,delrow,delcol);
            }
        }
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(mat[i][j]=='O' && !vis[i][j])
                {
                    mat[i][j]='X';
                }
            }
        }
        
        return mat;
        
    }
};
