class Solution 
{
    public:
    //Function to find minimum time required to rot all oranges. 
    int orangesRotting(vector<vector<int>>& grid) {
        // Code here
        int m=grid.size();
        int n=grid[0].size();
        
        vector<vector<int>>vis(m,vector<int>(n,0));
        int cntfresh=0;
        queue<pair<pair<int,int>,int>>q;
        int time=0;
        
        int delrow[4]={-1,0,1,0};
        int delcol[4]={0,1,0,-1};
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(!vis[i][j] && grid[i][j]==2)
                {
                    q.push({{i,j},time});
                    vis[i][j]=2;
                }
                if(grid[i][j]==1)
                {
                    cntfresh++;
                }
            }
        }
        
        while(!q.empty())
        {
            int row=q.front().first.first;
            int col=q.front().first.second;
            int t=q.front().second;
            time=max(time,t);
        
            q.pop();
            
            for(int k=0;k<4;k++)
            {
                int nrow=row+delrow[k];
                int ncol=col+delcol[k];
                
                if(nrow>=0 && nrow<m && ncol>=0 && ncol< n && grid[nrow][ncol]==1 && vis[nrow][ncol]==0)
                {
                    grid[nrow][ncol]=2;
                    vis[nrow][ncol]=2;
                    q.push({{nrow,ncol},t+1});
                    cntfresh--;
                }
            }
        }
        if(cntfresh==0)
        {
            return time;
        }
        return -1;
    }
};
