class Solution {
  public:
    int CheapestFLight(int n, vector<vector<int>>& flights, int src, int dst, int K)  {
        // Code here
        unordered_map<int,list<pair<int,int>>>adj;
        for(int i=0;i<flights.size();i++)
        {
            int u=flights[i][0];
            int v=flights[i][1];
            int w=flights[i][2];
            adj[u].push_back({v,w});
        }
        vector<int>cost(n,1e9);
        cost[src]=0;
        
        queue<pair<int,pair<int,int>>>q;
        q.push({0,{src,0}});
        while(!q.empty())
        {
           int stops=q.front().first;
           int node=q.front().second.first;
           int dist=q.front().second.second;
           q.pop();
           
           for(auto nbr:adj[node])
           {
               if(dist+nbr.second<cost[nbr.first] &&stops<=K)
               {
                   cost[nbr.first]=dist+nbr.second;
                   q.push({stops+1,{nbr.first,cost[nbr.first]}});
               }
           }
        }
        if(cost[dst]==1e9)
        {
            return -1;
        }
        return cost[dst];
    }
};
