class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        queue<pair<string,int>>q;
        q.push(make_pair(beginWord,1));
        unordered_set<string> st(wordList.begin(),wordList.end());
        while(!q.empty())
        {
            string cg=q.front().first;
            int steps=q.front().second;
            q.pop();
            if(cg== endWord)
            return steps;
            for(int i=0;i<cg.size();i++)
            {
                  char original=cg[i];
                for(char ch='a';ch<='z';ch++)
                {
                    cg[i]=ch;
                    if(st.find(cg)!=st.end())
                    {
                        q.push({cg,steps+1});
                        st.erase(cg);
                    }
                }
                cg[i]=original;
            }
        }
        return 0;
    }
};
