class Solution {
  public:
  void dfs(int i,  unordered_map<int,list<int>> & hue,vector<int> & vis )
  {
      vis[i]=1;
      
      for(auto neighbour:hue[i])
      {
          if(!vis[neighbour])
          {
              dfs(neighbour,hue,vis);
          }
      }
  }
    int numProvinces(vector<vector<int>> adj, int V) {
        // code here
        int m=adj.size();
        int n=adj[0].size();
         unordered_map<int,list<int>>hue;
        for(int i=0;i<adj.size();i++)
        {
            for(int j=0;j<adj[0].size();j++)
            {
                if(i!=j && adj[i][j]==1)
                {
                    hue[i].push_back(j);
                }
            }
        }
        
        vector<int>vis(n,0);
        int ans=0;
        for(int i=0;i<n;i++)
        {
            if(!vis[i])
            {
                dfs(i,hue,vis);
                ans++;
            }
        }
        return ans;
    }
};
