class Solution {
  public:
  void dfs(int row, int col, vector<vector<int>>& grid,vector<vector<int>> &vis, vector<pair<int,int>> &v,int &brow,int &bcol )
  {
      int n=grid.size();
        int m=grid[0].size();
        
      int delrow[4]={0,-1,0,1};
      int delcol[4]={-1,0,1,0};
      vis[row][col]=1;
      v.push_back({row-brow,col-bcol});
      
      for(int i=0;i<4;i++)
      {
          int nrow=row+delrow[i];
          int ncol=col+delcol[i];
           if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]==1 && !vis[nrow][ncol])
                {
                    dfs(nrow,ncol,grid, vis,v,brow,bcol);
          
      }
  }
  }
    int countDistinctIslands(vector<vector<int>>& grid) {
        // code here
        int n=grid.size();
        int m=grid[0].size();
        
        vector<vector<int>>vis(n,vector<int>(m,0));
        set<vector<pair<int,int>>> s;
         vector<pair<int,int>>v;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==1 && !vis[i][j])
                {
                   
                    dfs(i,j,grid, vis,v,i,j);
                    s.insert(v);
                    v.clear();
                }
            }
        }
        int ans=s.size();
        return ans;
        
    }
};
