USING DFS

#include<unordered_map>
#include<list>
bool dfs(int src,int parent,unordered_map<int,int>&visited,unordered_map<int,list<int>>&adj)
{
    for(auto i:adj[src])
    {
        if(!visited[i])
        {
            visited[i]=1;
        bool detected=dfs(i,src,visited,adj); 
        
        if(detected)
        {
            return true;
        }}
        else if(visited[i]&&parent!=i)
        {
            return true;     
    }}
    return false;
}
string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    // Write your code here.
    unordered_map<int,list<int>>adj;
    for(int i=0;i<edges.size();i++)
    {
        int u=edges[i][0];
        int v=edges[i][1];
        
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
   unordered_map<int,int>visited;
    for(int i=0;i<n;i++)
    {
        if(!visited[i])
        {
            visited[i]=1;
            bool ans=dfs(i,-1,visited,adj);
            if(ans)
            {
                return "Yes";
            }
        }
    }
    return "No";
}
