class Solution {
public:
    vector<int> nextSmallerElement(vector<int> heights,int n)
    {
        vector<int>ans(n);
        stack<int>s;
        s.push(-1);
        for(int i=n-1;i>=0;i--)
        {
            while(s.top()!=-1&&heights[s.top()]>=heights[i])
            {
                s.pop();
            }
            ans[i]=s.top();
            s.push(i);
        }
       /* for(int i=0;i<n;i++)
        {
            cout<<ans[i]<<" "<<endl;
        }*/
        return ans;
    }
     vector<int> previousSmallerElement(vector<int> heights,int n)
    {
        vector<int>ans(n);
        stack<int>s;
        s.push(-1);
        for(int i=0;i<n;i++)
        {
            while(s.top()!=-1&&heights[s.top()]>=heights[i])
            {
                s.pop();
            }
            ans[i]=s.top();
            s.push(i);
        }
       /* for(int i=0;i<n;i++)
        {
            cout<<ans[i]<<" "<<endl;
        }*/
        return ans;
    }
    int largestRectangleArea(vector<int>& heights) {
        int area=INT_MIN;
        int n=heights.size();
        vector<int>next(n);
        next=nextSmallerElement(heights,n);
          vector<int>prev(n);
        prev=previousSmallerElement(heights,n);
        
        for(int i=0;i<n;i++)
        {
            
            if(next[i]==-1)
            {
                next[i]=n;
            }
          int b=next[i]-prev[i]-1;
            area=max(area,(b*heights[i]));
        }
        return area;
    }
};
