class Solution {
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        int N=numCourses;
        unordered_map<int,list<int>>adj;
	    for(int i=0;i<prerequisites.size();i++)
	    {
	        int u=prerequisites[i][0];
	        int v=prerequisites[i][1];
	        adj[v].push_back(u);
	    }
	    queue<int>q;
	    vector<int>indegree(N);
	    for(auto i:adj)
	    {
	        for(auto j:i.second)
	        {
	            indegree[j]++;
	        }
	    }
	    for(int i=0;i<indegree.size();i++)
	    {
	        if(indegree[i]==0)
	        {
	            q.push(i);
	        }
	    }
	    int cnt=0;
	    while(!q.empty())
	    {
	        int frontNode=q.front();
	        q.pop();
	        cnt++;
	        for(auto neighbour:adj[frontNode])
	        {
	            indegree[neighbour]--;
	            if(indegree[neighbour]==0)
	            {
	                q.push(neighbour);
	            }
	        }
	    }
	    if(cnt==N)
	    {
	        return true;
	    }
	    return false;
    }
};
