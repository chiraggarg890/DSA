/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* solve(vector<int>& nums,int start,int end)
    {
        if(start>end)
        {
            return NULL;
        }
        auto maxi=max_element(nums.begin()+start,nums.begin()+end+1);
        int max=*maxi;
     TreeNode* root=new TreeNode(max);
        int pos=distance(nums.begin(),maxi);
        cout<<max<<" "<<pos<<"\n";
   root->left=solve(nums,start,pos-1);
        root->right=solve(nums,pos+1,end);
        return root;
        
    }
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        int n=nums.size()-1;
        TreeNode* ans= solve(nums,0,n);
        return ans;
       
    }
};
