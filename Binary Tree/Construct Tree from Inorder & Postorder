struct Node
{
    int data;
    struct Node* left;
    struct Node* right;

    Node(int x){
        data = x;
        left = right = NULL;
    }
};*/
void createMapping(int in[],map<int,int>&nodeToIndex,int n)
    {
        for(int i=0;i<n;i++)
        {
            nodeToIndex[in[i]]=i;
        }
    }
  Node* solve(int in[],int post[],int &index,int start,int end,int n,map<int,int>&nodeToIndex)
  {
      if(index<0||start>end)
      {
          return NULL;
      }
      int element=post[index--];
      Node* root=new Node(element);
      int pos=nodeToIndex[element];
       root->right=solve(in,post,index,pos+1,end,n,nodeToIndex);
      root->left=solve(in,post,index,start,pos-1,n,nodeToIndex);
     
      return root;
  }
//Function to return a tree created from postorder and inoreder traversals.
Node *buildTree(int in[], int post[], int n) {
    // Your code here
    int postIndex=n-1;
        map<int,int>nodeToIndex;
        createMapping(in,nodeToIndex,n);
        Node* ans=solve(in,post,postIndex,0,n-1,n,nodeToIndex);
        return ans;
}
