/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        vector<vector<int>>result;
        if(root==NULL)
        {
            return result;
        }
        map<int,map<int,vector<int>>>nodes;
        queue<pair<TreeNode*,pair<int,int>>>q;
        q.push(make_pair(root,make_pair(0,0)));
        while(!q.empty())
        {
            pair<TreeNode*,pair<int,int>>p=q.front();
            q.pop();
            TreeNode* front=p.first;
            int hd=p.second.first;
            int level=p.second.second;
            nodes[hd][level].push_back(front->val);
            if(front->left)
            {
                q.push(make_pair(front->left,make_pair(hd-1,level+1)));
            }
            if(front->right)
            {
                q.push(make_pair(front->right,make_pair(hd+1,level+1)));
            }
        }
        vector<int>ans;vector<int>temp;
        for(auto i:nodes)
        {  
            for(auto j:i.second)    
            {    
                for(auto k:j.second)
                { 
                    temp.push_back(k);
                }
                 sort(temp.begin(),temp.end()); 
                for(auto y:temp)
                {
                    ans.push_back(y);
                }
                temp.clear();
            }
           
  result.push_back(ans);
                ans.clear();
        }
        
        return result;
    }
};
