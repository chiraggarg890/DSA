BY RECURSION

class Solution {
public:
    int solveRec(vector<int>& coins, int amount)
    {
        if(amount==0)
        {
            return 0;
        }
        if(amount<0)
        {
            return INT_MAX;
        }
        
        int mini=INT_MAX;
        for(int i=0;i<coins.size();i++)
        {
            int ans=solveRec(coins,amount-coins[i]);
            if(ans!=INT_MAX)
            {
                mini=min(mini,1+ans);
            }
        }
        return mini;
    }
    int coinChange(vector<int>& coins, int amount) {
        int ans=solveRec(coins,amount);
        if(ans!=INT_MAX)
            return ans;
        else
            return -1;
    }
};



BY RECURSION  +   MEMOIZATION

class Solution {
public:
    int solveRec(vector<int>& coins, int amount,vector<int>& dp)
    {
        if(amount==0)
        {
            return 0;
        }
        if(amount<0)
        {
            return INT_MAX;
        }
         if(dp[amount]!=-1)
         {
        return dp[amount];
         }
        int mini=INT_MAX;
        for(int i=0;i<coins.size();i++)
        { 
     int ans =solveRec(coins,amount-coins[i],dp);
            if(ans!=INT_MAX)
            {
                mini=min(mini,1+ans);
            }
        }
        dp[amount]=mini;
        return mini;
    }
    int coinChange(vector<int>& coins, int amount) {
        vector<int>dp(amount+1,-1);
        int ans=solveRec(coins,amount,dp);
        if(ans!=INT_MAX)
            return ans;
        else
            return -1;
    }
};


BY TABULATION

class Solution {
public:
    int solveTab(vector<int>& coins, int amount,vector<int>& dp)
    {
        dp[0]=0;
     
        for(int i=1;i<=amount;i++)
        {
            for(int j=0;j<coins.size();j++)
            {
                if(i-coins[j]>=0&&dp[i-coins[j]]!=INT_MAX)
                {
                    dp[i]=min(dp[i],1+dp[i-coins[j]]);
            }
        }
    }
        if(dp[amount]==INT_MAX)
        {
            return -1;
        }
        return dp[amount];
    }
    int coinChange(vector<int>& coins, int amount) {
      vector<int>dp(amount+1,INT_MAX);
   int ans= solveTab(coins,amount,dp);
        return ans;
    }
};


SPACE OPTIMIZATION NOT POSSIBLE
