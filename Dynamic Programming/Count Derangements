#define MOD 1000000007
#include <vector>
#include<bits/stdc++.h>


RECURSION
/*long long int solve(int n)
{
    if(n==1)
    {
        return 0;
    }
    if(n==2)
    {
        return 1;
    }
long long int ans=((n-1)%MOD*((solve(n-1)%MOD)+(solve(n-2)%MOD)));
             return ans;
}*/

RECURSION + MEMOIZATION
/*long long int solveRec(int n,vector<long long int>& dp)
{
    if(n==1)
    {
        return 0;
    }
    if(n==2)
    {
        return 1;
    }
    if(dp[n]!=-1)
    {
        return dp[n];
    }
long long int ans=(((n-1)%MOD)*((solveRec(n-1,dp)%MOD)+(solveRec(n-2,dp)%MOD))%MOD);
             return dp[n]=ans;
}*/

TABULATION
long long int solveTab(int n)
{
    vector<long long int>dp(n+1,0);
    dp[1]=0;
    dp[2]=1;
    for(long long int i=3;i<=n;i++)
    {
        long long int first=dp[i-1]%MOD;
        long long int second=dp[i-2]%MOD;
        long long int sum=(first+second)%MOD;
        long long int ans=(((i-1)%MOD)*sum)%MOD;
        dp[i]=ans;
    }
    return dp[n];
}

TABULATION + SPACE OPTIMIZATION
long long int solveTabSO(int n)
{
   int prev1=0;int prev2=1;
    for(long long int i=3;i<=n;i++)
    {
        long long int first=prev2%MOD;
        long long int second=prev1%MOD;
        long long int sum=(first+second)%MOD;
        long long int ans=(((i-1)%MOD)*sum)%MOD;
        int curr=ans;
        prev1=prev2;
        prev2=curr;
    }
    return prev2;
}

long long int countDerangements(int n) {
    // Write your code here.
  //  return solve(n);
 // vector<long long int>dp(n+1,-1);
  //return solveRec(n,dp);
  //  return solveTab(n);
   return solveTabSO(n);
}
