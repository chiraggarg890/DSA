// Tabulation + Space Optimisation
#include <bits/stdc++.h> 
long long int solveSO(vector<int> &nums)
{
 long long int n=nums.size();
       long long int prev1=nums[0];
        long long int prev2=0;
    for(long long int i=1;i<n;i++)
    {
        long long int pick=nums[i];
           if(i>1)
      pick+=prev2;
       long long  int notPick=prev1;
  long long  int curr= max(pick,notPick);
         prev2=prev1;
        prev1=curr;
       
    }
    return prev1;
}
long long int houseRobber(vector<int>& valueInHouse)
{
    // Write your code here.
    vector<int>temp1,temp2;
long long int n=valueInHouse.size();
     if(n==0)return 0;
    if(n==1)
    {
        return valueInHouse[0];
    }
     if(n==2)return max(valueInHouse[0],valueInHouse[1]);
    for(int i=0;i<n;i++)
    {
        if(i!=0)
            temp1.push_back(valueInHouse[i]);
        if(i!=n-1)
            temp2.push_back(valueInHouse[i]);
    }
    return max(solveSO(temp1),solveSO(temp2));
}
