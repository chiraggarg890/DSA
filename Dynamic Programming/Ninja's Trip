RECURSION +  MEMOIZATION

/*int solve(int n, vector<int> days, vector<int> cost,int index,vector<int>&dp)
 {
     if(index>=n)
     {
         return 0;
     }
    if(dp[index]!=-1)
    {
        return dp[index];
    }
    int option1=cost[0]+solve(n,days,cost,index+1,dp);
    
    int i;
    for(i=index;i<n&&days[i]<days[index]+7;i++);
    int option2=cost[1]+solve(n,days,cost,i,dp);
    
    for(i=index;i<n&&days[i]<days[index]+30;i++);
    int option3=cost[2]+solve(n,days,cost,i,dp);
    
    return dp[index]=min(option1,min(option2,option3));
        
 }*/
 
 TABULATION
 
 
int solveTab(int n, vector<int> days, vector<int> cost)
{
     vector<int>dp(n+1,INT_MAX);
    dp[n]=0;
    for(int j=n-1;j>=0;j--)
    {
    int option1=cost[0]+dp[j+1];
    
    int i;
    for(i=j;i<n&&days[i]<days[j]+7;i++);
    int option2=cost[1]+dp[i];
    
    for(i=j;i<n&&days[i]<days[j]+30;i++);
    int option3=cost[2]+dp[i];
    
    dp[j]=min(option1,min(option2,option3));
    }
    return dp[0];
}
int minimumCoins(int n, vector<int> days, vector<int> cost)
{
    // Write your code here.
   // vector<int>dp(n+1,-1);
    return solveTab(n,days,cost);
}
