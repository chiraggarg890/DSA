RECURSION + MEMOIZATION

#include <bits/stdc++.h> 
// RECURSION + MEMOIZATION

/**int solve(vector<int> &nums,vector<int> &dp,int i)
{
    if(i==0)
    {
        return nums[0];
    }
    if(i<0)
    {
        return 0;
    }
    if(dp[i]!=-1)
    {
        return dp[i];
    }
    int pick=nums[i]+solve(nums,dp,i-2);
    int notPick=0+solve(nums,dp,i-1);
    return dp[i]=max(pick,notPick);
}**/


TABULATION
int solveTab(vector<int> &nums)
{
    int n=nums.size();
    vector<int>dp(n,0);
    dp[0]=nums[0];
    for(int i=1;i<n;i++)
    {
       int pick=nums[i];
           if(i>1)
      pick+=dp[i-2];
        int notPick=dp[i-1];
    dp[i]= max(pick,notPick);
    }
    
   return dp[n-1];
}


int maximumNonAdjacentSum(vector<int> &nums){
    // Write your code here.
   // int n=nums.size();
   // vector<int>dp(n,-1);
    return solveTab(nums);
}
